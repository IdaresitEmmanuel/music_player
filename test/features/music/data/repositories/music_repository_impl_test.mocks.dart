// Mocks generated by Mockito 5.1.0 from annotations
// in music_player/test/features/music/data/repositories/music_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:music_player/core/platform/storage_permission_info.dart' as _i8;
import 'package:music_player/features/music/data/datasources/music_data_source/music_local_data_source.dart'
    as _i2;
import 'package:music_player/features/music/data/models/album_model.dart'
    as _i6;
import 'package:music_player/features/music/data/models/artist_model.dart'
    as _i5;
import 'package:music_player/features/music/data/models/folder_model.dart'
    as _i7;
import 'package:music_player/features/music/data/models/music_model.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [MusicLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMusicLocalDataSource extends _i1.Mock
    implements _i2.MusicLocalDataSource {
  MockMusicLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.MusicModel>> getAllMusic() => (super.noSuchMethod(
          Invocation.method(#getAllMusic, []),
          returnValue: Future<List<_i4.MusicModel>>.value(<_i4.MusicModel>[]))
      as _i3.Future<List<_i4.MusicModel>>);
  @override
  _i3.Future<List<_i5.ArtistsModel>> getArtists() =>
      (super.noSuchMethod(Invocation.method(#getArtists, []),
              returnValue:
                  Future<List<_i5.ArtistsModel>>.value(<_i5.ArtistsModel>[]))
          as _i3.Future<List<_i5.ArtistsModel>>);
  @override
  _i3.Future<List<_i6.AlbumsModel>> getAlbums() => (super.noSuchMethod(
          Invocation.method(#getAlbums, []),
          returnValue: Future<List<_i6.AlbumsModel>>.value(<_i6.AlbumsModel>[]))
      as _i3.Future<List<_i6.AlbumsModel>>);
  @override
  _i3.Future<List<_i7.FolderModel>> getFolders() => (super.noSuchMethod(
          Invocation.method(#getFolders, []),
          returnValue: Future<List<_i7.FolderModel>>.value(<_i7.FolderModel>[]))
      as _i3.Future<List<_i7.FolderModel>>);
  @override
  _i3.Future<List<_i4.MusicModel>> getMusicByArtist(String? artist) =>
      (super.noSuchMethod(Invocation.method(#getMusicByArtist, [artist]),
              returnValue:
                  Future<List<_i4.MusicModel>>.value(<_i4.MusicModel>[]))
          as _i3.Future<List<_i4.MusicModel>>);
  @override
  _i3.Future<List<_i4.MusicModel>> getMusicByAlbum(String? album) =>
      (super.noSuchMethod(Invocation.method(#getMusicByAlbum, [album]),
              returnValue:
                  Future<List<_i4.MusicModel>>.value(<_i4.MusicModel>[]))
          as _i3.Future<List<_i4.MusicModel>>);
  @override
  _i3.Future<List<_i4.MusicModel>> getMusicByFolder(String? folder) =>
      (super.noSuchMethod(Invocation.method(#getMusicByFolder, [folder]),
              returnValue:
                  Future<List<_i4.MusicModel>>.value(<_i4.MusicModel>[]))
          as _i3.Future<List<_i4.MusicModel>>);
}

/// A class which mocks [StoragePermissionInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoragePermissionInfo extends _i1.Mock
    implements _i8.StoragePermissionInfo {
  MockStoragePermissionInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get hasPermission =>
      (super.noSuchMethod(Invocation.getter(#hasPermission),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> requestStoragePermission() =>
      (super.noSuchMethod(Invocation.method(#requestStoragePermission, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
