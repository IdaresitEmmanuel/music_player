// Mocks generated by Mockito 5.4.0 from annotations
// in music_player/test/features/music/presentation/bloc/playlist_bloc/playlist_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i13;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:music_player/core/error/failures.dart' as _i8;
import 'package:music_player/features/music/domain/entities/music.dart' as _i9;
import 'package:music_player/features/music/domain/repositories/music_repository.dart'
    as _i2;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_album_art.dart'
    as _i12;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_music_by_album.dart'
    as _i10;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_music_by_artist.dart'
    as _i7;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_music_by_folder.dart'
    as _i11;
import 'package:music_player/features/music/domain/usecases/music_usecases/request_storage_permission.dart'
    as _i5;
import 'package:on_audio_query/on_audio_query.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMusicRepository_0 extends _i1.SmartFake
    implements _i2.MusicRepository {
  _FakeMusicRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOnAudioQuery_2 extends _i1.SmartFake implements _i4.OnAudioQuery {
  _FakeOnAudioQuery_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RequestStoragePermission].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestStoragePermission extends _i1.Mock
    implements _i5.RequestStoragePermission {
  MockRequestStoragePermission() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMusicRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MusicRepository);
  @override
  _i6.Future<bool> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [GetMusicByArtist].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMusicByArtist extends _i1.Mock implements _i7.GetMusicByArtist {
  MockGetMusicByArtist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMusicRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MusicRepository);
  @override
  _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>> call(String? artist) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [artist],
        ),
        returnValue: _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>>.value(
            _FakeEither_1<_i8.Failure, List<_i9.Music>>(
          this,
          Invocation.method(
            #call,
            [artist],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>>);
}

/// A class which mocks [GetMusicByAlbum].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMusicByAlbum extends _i1.Mock implements _i10.GetMusicByAlbum {
  MockGetMusicByAlbum() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMusicRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MusicRepository);
  @override
  _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>> call(String? album) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [album],
        ),
        returnValue: _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>>.value(
            _FakeEither_1<_i8.Failure, List<_i9.Music>>(
          this,
          Invocation.method(
            #call,
            [album],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>>);
}

/// A class which mocks [GetMusicByFolder].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMusicByFolder extends _i1.Mock implements _i11.GetMusicByFolder {
  MockGetMusicByFolder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMusicRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MusicRepository);
  @override
  _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>> call(String? folder) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [folder],
        ),
        returnValue: _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>>.value(
            _FakeEither_1<_i8.Failure, List<_i9.Music>>(
          this,
          Invocation.method(
            #call,
            [folder],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.Failure, List<_i9.Music>>>);
}

/// A class which mocks [GetAlbumArt].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAlbumArt extends _i1.Mock implements _i12.GetAlbumArt {
  MockGetAlbumArt() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.OnAudioQuery get artQuery => (super.noSuchMethod(
        Invocation.getter(#artQuery),
        returnValue: _FakeOnAudioQuery_2(
          this,
          Invocation.getter(#artQuery),
        ),
      ) as _i4.OnAudioQuery);
  @override
  _i6.Future<_i13.Uint8List?> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i6.Future<_i13.Uint8List?>.value(),
      ) as _i6.Future<_i13.Uint8List?>);
}
