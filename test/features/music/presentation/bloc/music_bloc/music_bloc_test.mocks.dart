// Mocks generated by Mockito 5.1.0 from annotations
// in music_player/test/features/music/presentation/bloc/music_bloc/music_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:music_player/core/error/failures.dart' as _i6;
import 'package:music_player/features/music/domain/entities/album.dart' as _i11;
import 'package:music_player/features/music/domain/entities/artist.dart' as _i9;
import 'package:music_player/features/music/domain/entities/folder.dart'
    as _i13;
import 'package:music_player/features/music/domain/entities/music.dart' as _i7;
import 'package:music_player/features/music/domain/repositories/music_repository.dart'
    as _i2;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_albums.dart'
    as _i10;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_all_music.dart'
    as _i4;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_artists.dart'
    as _i8;
import 'package:music_player/features/music/domain/usecases/music_usecases/get_folders.dart'
    as _i12;
import 'package:music_player/features/music/domain/usecases/music_usecases/request_storage_permission.dart'
    as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMusicRepository_0 extends _i1.Fake implements _i2.MusicRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetAllMusic].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllMusic extends _i1.Mock implements _i4.GetAllMusic {
  MockGetAllMusic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMusicRepository_0()) as _i2.MusicRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Music>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Music>>>.value(
              _FakeEither_1<_i6.Failure, List<_i7.Music>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Music>>>);
}

/// A class which mocks [GetArtists].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetArtists extends _i1.Mock implements _i8.GetArtists {
  MockGetArtists() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMusicRepository_0()) as _i2.MusicRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i9.Artist>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i9.Artist>>>.value(
              _FakeEither_1<_i6.Failure, List<_i9.Artist>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i9.Artist>>>);
}

/// A class which mocks [GetAlbums].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAlbums extends _i1.Mock implements _i10.GetAlbums {
  MockGetAlbums() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMusicRepository_0()) as _i2.MusicRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i11.Album>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i11.Album>>>.value(
              _FakeEither_1<_i6.Failure, List<_i11.Album>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i11.Album>>>);
}

/// A class which mocks [GetFolders].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFolders extends _i1.Mock implements _i12.GetFolders {
  MockGetFolders() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMusicRepository_0()) as _i2.MusicRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i13.Folder>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i13.Folder>>>.value(
              _FakeEither_1<_i6.Failure, List<_i13.Folder>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i13.Folder>>>);
}

/// A class which mocks [RequestStoragePermission].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestStoragePermission extends _i1.Mock
    implements _i14.RequestStoragePermission {
  MockRequestStoragePermission() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MusicRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMusicRepository_0()) as _i2.MusicRepository);
  @override
  _i5.Future<bool> call() => (super.noSuchMethod(Invocation.method(#call, []),
      returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
